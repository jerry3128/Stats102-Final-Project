@article{BHL1996LinearTreeDeomposition,
author = {Bodlaender, Hans L.},
title = {A Linear-Time Algorithm for Finding Tree-Decompositions of Small Treewidth},
journal = {SIAM Journal on Computing},
volume = {25},
number = {6},
pages = {1305-1317},
year = {1996},
doi = {10.1137/S0097539793251219},
URL = {\url{https://doi.org/10.1137/S0097539793251219}},
eprint = {\url{https://doi.org/10.1137/S0097539793251219}},
abstract = { In this paper, we give for constant k a linear-time algorithm that, given a graph \$G = (V,E)\$, determines whether the treewidth of G is at most k and, if so, finds a tree-decomposition of G with treewidth at most k. A consequence is that every minor-closed class of graphs that does not contain all planar graphs has a linear-time recognition algorithm. Another consequence is that a similar result holds when we look instead for path-decompositions with pathwidth at most some constant k. }
}

@InProceedings{BHL1991BetterAlgoTreeWidth,
author="Bodlaender, Hans L.
and Kloks, Ton",
editor="Albert, Javier Leach
and Monien, Burkhard
and Artalejo, Mario Rodr{\'i}guez",
title="Better algorithms for the pathwidth and treewidth of graphs",
booktitle="Automata, Languages and Programming",
year="1991",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="544--555",
abstract="In this paper we give, for all constants k, explicit O(n log2n) algorithms, that given a graph G = (V,E), decide whether the treewidth (or pathwidth) of G is at most k, and if so, find a tree-decomposition or (path-decomposition) of G with treewidth (or pathwidth) at most k. In contrast with previous solutions, our algorithms do not rely on non-constructive reasoning, and are single exponential in k. This result implies a similar result for several graph notions that are equivalent with treewidth or pathwidth.",
isbn="978-3-540-47516-3"
}

@InProceedings{ASP2008,
author="Gutin, G.
Szeider, S.",
editor="Martin Grohe
Rolf Niedermeier",
title="Parameterized and exact computation: 8th International Symposium",
booktitle="Automata, Languages and Programming",
year="2013",
publisher="Springer Berlin Heidelberg"
}

@article{MLonTD2017,
author = {Abseher, Michael and Musliu, Nysret and Woltran, Stefan},
year = {2017},
month = {04},
pages = {829-858},
title = {Improving the Efficiency of Dynamic Programming on Tree Decompositions via Machine Learning},
volume = {58},
journal = {Journal of Artificial Intelligence Research},
doi = {10.1613/jair.5312}
}

@article{BasicTD1991,
title = {Algorithms finding tree-decompositions of graphs},
journal = {Journal of Algorithms},
volume = {12},
number = {1},
pages = {1-22},
year = {1991},
issn = {0196-6774},
doi = {https://doi.org/10.1016/0196-6774(91)90020-Y},
url = {https://www.sciencedirect.com/science/article/pii/019667749190020Y},
author = {Jiří Matoušek and Robin Thomas},
abstract = {A graph G has tree-width at most w if it admits a tree-decomposition of width ≤ w. It is known that once we have a tree-decomposition of a graph G of bounded width, many NP-hard problems can be solved for G in linear time. For w ≤ 3 we give a linear time algorithm for finding such a decomposition and for a general fixed w we obtain a probabilistic algorithm with execution time O(n log2 n + n log n∥log p∥), which for a graph G on n vertices and a real number p > 0 either finds a tree-decomposition of width ≤ 6w or answers that the tree-width of G is ≥ w; this second answer may be wrong but with probability at most p. The second result is based on a separator technique which may be of independent interest.}
}

@InProceedings{FasterTD2019,
  author =	{Kangas, Kustaa and Koivisto, Mikko and Salonen, Sami},
  title =	{{A Faster Tree-Decomposition Based Algorithm for Counting Linear Extensions}},
  booktitle =	{13th International Symposium on Parameterized and Exact Computation (IPEC 2018)},
  pages =	{5:1--5:13},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-084-2},
  ISSN =	{1868-8969},
  year =	{2019},
  volume =	{115},
  editor =	{Paul, Christophe and Pilipczuk, Michal},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.IPEC.2018.5},
  URN =		{urn:nbn:de:0030-drops-102062},
  doi =		{10.4230/LIPIcs.IPEC.2018.5},
  annote =	{Keywords: Algorithm selection, empirical hardness, linear extension, multiplication of polynomials, tree decomposition}
}